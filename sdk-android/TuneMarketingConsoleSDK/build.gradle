import java.util.regex.Pattern

apply plugin: 'com.android.library'

ext {
    PUBLISH_GROUP_ID = 'com.tune'
    PUBLISH_ARTIFACT_ID = 'tune-marketing-console-sdk'
    PUBLISH_VERSION = '4.11.0'
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.1'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionName '4.11.0'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            buildConfigField "Boolean", "DEBUG_MODE", "true"
        }
        release {
            buildConfigField "Boolean", "DEBUG_MODE", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    productFlavors {
//        lite {
//            versionNameSuffix "-lite"
//        }
        full {
//            versionNameSuffix "-full"
        }
    }

    defaultPublishConfig "fullRelease"

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

// Creates Gradle dependency configurations to use in the dependencies block.
// Reference https://developer.android.com/studio/projects/android-library.html
configurations {
    // Initializes placeholder configurations that the Android plugin can use when targeting
    // the corresponding variant of the app.
    liteReleaseCompile {}
    fullReleaseCompile {}
}

dependencies {
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.android.support:support-v4:25.1.0'
    // Unit testing dependencies
    androidTestCompile 'com.android.support:support-annotations:25.1.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'junit:junit:4.12'

    // SmartWhere is included in the 'full' sdk flavor
    fullCompile 'com.smartwhere:android-tune:17194'
}

// Delete old jar
task clearJarFull(type: Delete) {
    String jarNameFull = "${project.name}-${android.defaultConfig.versionName}"

    delete "../dist/${jarNameFull}.jar"
    doLast {
        println "Deleting old /dist/${jarNameFull}.jar"
    }
}

// Delete old jar
task clearJarLite(type: Delete) {
    String jarNameLite = "${project.name}-${android.defaultConfig.versionName}-lite"

    delete "../dist/${jarNameLite}.jar"
    doLast {
        println "Deleting old /dist/${jarNameLite}.jar"
    }
}

// Extract jar from aar
task makeJarFull(type:Copy, dependsOn: [clearJarFull, assemble]) {
    String outputDir = "${buildDir.getPath()}/outputs"

    String archiveNameFull = "${project.name}-full-release"
    String jarNameFull = "${project.name}-${android.defaultConfig.versionName}"

    doLast {
        println "Extracting classes.jar from ${outputDir}/aar/${archiveNameFull}.aar"
    }

    from(zipTree("${outputDir}/aar/${archiveNameFull}.aar"))
    into("../dist/")
    include('classes.jar')
    rename ('classes.jar', "${jarNameFull}.jar")
    doLast {
        println "Created /dist/${jarNameFull}.jar"
    }
}

// Extract jar from aar
task makeJarLite(type:Copy, dependsOn: [clearJarLite, assemble]) {
    String outputDir = "${buildDir.getPath()}/outputs"

    String archiveNameLite = "${project.name}-lite-release"
    String jarNameLite = "${project.name}-${android.defaultConfig.versionName}-lite"

    from(zipTree("${outputDir}/aar/${archiveNameLite}.aar"))
    into("../dist/")
    include('classes.jar')
    rename ('classes.jar', "${jarNameLite}.jar")
    doLast {
        println "Created /dist/${jarNameLite}.jar"
    }
}

// Extract jar from aar
//task makeJar(type:Copy, dependsOn: [makeJarFull, makeJarLite]) {
task makeJar(type:Copy, dependsOn: [makeJarFull]) {
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options {
        links "http://docs.oracle.com/javase/7/docs/api/"
        linksOffline "http://d.android.com/reference","${android.sdkDirectory}/docs/reference"
    }
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task grantDebugPermissions {
    String applicationId = 'com.tune.test'
    def adb = android.getAdbExe().toString()
    "${adb} devices".execute().text.eachLine {
        if (it.endsWith("device")) {
            def device = it.split()[0]
            println "Granting permissions on devices ${device}"
            def permissions = [
                    'ACCESS_COARSE_LOCATION',
                    'ACCESS_FINE_LOCATION',
                    'ACCESS_MOCK_LOCATION'
            ]
            permissions.each {
                String cmd = "${adb} -s ${device} shell pm grant ${applicationId} android.permission.${it}"
                println "Grant permission to ${it}"
                def process = cmd.execute()
                process.waitFor()
                def exitValue = process.exitValue()
                if (!exitValue) {
                    println "Failed to grant permission ${it}"
                }
                process.text.each { println it }
            }
        }
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Allow us to build as an Android Studio library
// https://medium.com/@tigr/how-to-publish-your-android-studio-library-to-jcenter-5384172c4739#.vg4grvo60
apply from: 'https://raw.githubusercontent.com/blundell/release-android-library/master/android-release-aar.gradle'
